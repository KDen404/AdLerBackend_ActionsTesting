name: Run tests and release container
on:
  release:
    types: [created]

jobs:
  publish:
    #needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      dotNetVersion: net7.0
      dotNetConfiguration: Release
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determining Current Version
        id: version
        uses: codacy/git-version@2.7.1

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}_${{steps.version.outputs.version}}


      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          flavor: |
            latest=auto
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{steps.version.outputs.version}}, v${{steps.version.outputs.major}}, ${{steps.version.outputs.major}}.${{steps.version.outputs.minor}}, killakatze
  
  
  
  #  test:
#    runs-on: ${{ matrix.os }}
#    strategy:
#      matrix:
#        os: [ubuntu-20.04, windows-latest, macos-latest]
#    env:
#      dotNetVersion: net7.0
#      dotNetConfiguration: Release
#    steps:
#      # checkout the repo
#      - uses: actions/checkout@v2
#        with:
#          submodules: 'true'
#
#      # install dependencies, build, and test
#      - name: Setup Dotnet for use with actions
#        uses: actions/setup-dotnet@v1
#        with:
#          dotnet-version: '7.x'
#
#      - name: Cache Nuget Packages
#        uses: actions/cache@v2
#        with:
#          path: ~/.nuget/packages
#          # Look to see if there is a cache hit for the corresponding requirements file
#          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
#          restore-keys: |
#            ${{ runner.os }}-nuget
#
#      - name: Run automated unit and integration tests
#        run: dotnet test
  