name: Run tests and release container
on:
  release:
    types: [created]

jobs:
  publish:
    #needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      dotNetVersion: net7.0
      dotNetConfiguration: Release
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    steps:
      # gitversion/setup@v0 action omitted for brevity.

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine Version
        id: gitversion # id to later be referenced
        uses: gittools/actions/gitversion/execute@v0

      - name: Display GitVersion outputs (step output)
        run: |
          echo "Major: ${{ steps.gitversion.outputs.major }}"
          echo "Minor: ${{ steps.gitversion.outputs.minor }}"
          echo "Patch: ${{ steps.gitversion.outputs.patch }}"
          echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
          echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
          echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
          echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
          echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
          echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
          echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
          echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
          echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
          echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
          echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
          echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
          echo "EscapedBranchName: ${{ steps.gitversion.outputs.escapedBranchName }}"
          echo "Sha: ${{ steps.gitversion.outputs.sha }}"
          echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
          echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
          echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
          echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
          echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
          echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
          echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
          echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
          echo "UncommittedChanges: ${{ steps.gitversion.outputs.uncommittedChanges }}"
          echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"

      - name: Display GitVersion outputs (step output with prefix)
        run: |
          echo "Major: ${{ steps.gitversion.outputs.GitVersion_Major }}"
          echo "Minor: ${{ steps.gitversion.outputs.GitVersion_Minor }}"
          echo "Patch: ${{ steps.gitversion.outputs.GitVersion_Patch }}"
          echo "PreReleaseTag: ${{ steps.gitversion.outputs.GitVersion_PreReleaseTag }}"
          echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.GitVersion_PreReleaseTagWithDash }}"
          echo "PreReleaseLabel: ${{ steps.gitversion.outputs.GitVersion_PreReleaseLabel }}"
          echo "PreReleaseNumber: ${{ steps.gitversion.outputs.GitVersion_PreReleaseNumber }}"
          echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.GitVersion_WeightedPreReleaseNumber }}"
          echo "BuildMetaData: ${{ steps.gitversion.outputs.GitVersion_BuildMetaData }}"
          echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.GitVersion_BuildMetaDataPadded }}"
          echo "FullBuildMetaData: ${{ steps.gitversion.outputs.GitVersion_FullBuildMetaData }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.GitVersion_MajorMinorPatch }}"
          echo "SemVer: ${{ steps.gitversion.outputs.GitVersion_SemVer }}"
          echo "LegacySemVer: ${{ steps.gitversion.outputs.GitVersion_LegacySemVer }}"
          echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.GitVersion_LegacySemVerPadded }}"
          echo "AssemblySemVer: ${{ steps.gitversion.outputs.GitVersion_AssemblySemVer }}"
          echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.GitVersion_AssemblySemFileVer }}"
          echo "FullSemVer: ${{ steps.gitversion.outputs.GitVersion_FullSemVer }}"
          echo "InformationalVersion: ${{ steps.gitversion.outputs.GitVersion_InformationalVersion }}"
          echo "BranchName: ${{ steps.gitversion.outputs.GitVersion_BranchName }}"
          echo "EscapedBranchName: ${{ steps.gitversion.outputs.GitVersion_EscapedBranchName }}"
          echo "Sha: ${{ steps.gitversion.outputs.GitVersion_Sha }}"
          echo "ShortSha: ${{ steps.gitversion.outputs.GitVersion_ShortSha }}"
          echo "NuGetVersionV2: ${{ steps.gitversion.outputs.GitVersion_NuGetVersionV2 }}"
          echo "NuGetVersion: ${{ steps.gitversion.outputs.GitVersion_NuGetVersion }}"
          echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.GitVersion_NuGetPreReleaseTagV2 }}"
          echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.GitVersion_NuGetPreReleaseTag }}"
          echo "VersionSourceSha: ${{ steps.gitversion.outputs.GitVersion_VersionSourceSha }}"
          echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.GitVersion_CommitsSinceVersionSource }}"
          echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.GitVersion_CommitsSinceVersionSourcePadded }}"
          echo "UncommittedChanges: ${{ steps.gitversion.outputs.GitVersion_UncommittedChanges }}"
          echo "CommitDate: ${{ steps.gitversion.outputs.GitVersion_CommitDate }}"

    #steps:
    #  - uses: actions/checkout@v2
    #    with:
    #      submodules: 'true'

    #  - name: Set up Docker Buildx
    #    id: buildx
    #    uses: docker/setup-buildx-action@v1

    #  - name: Log in to the Container registry
    #    uses: docker/login-action@v2
    #    with:
    #      registry: ${{ env.REGISTRY }}
    #      username: ${{ github.actor }}
    #      password: ${{ secrets.GITHUB_TOKEN }}

    #  - name: Determining Current Version
    #    id: version
    #    uses: codacy/git-version@2.7.1

    #  - name: Extract metadata (tags, labels) for Docker
    #    id: meta
    #    uses: docker/metadata-action@v3
    #    with:
    #      images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}_${{steps.version.outputs.version}}


    #  - name: Build and push Docker image
    #    uses: docker/build-push-action@v3
    #    with:
    #      context: .
    #      push: true
    #      flavor: |
    #        latest=auto
    #      labels: ${{ steps.meta.outputs.labels }}
    #      tags: ${{steps.version.outputs.version}}, v${{steps.version.outputs.major}}, ${{steps.version.outputs.major}}.${{steps.version.outputs.minor}}, killakatze
  
  
  
  #  test:
#    runs-on: ${{ matrix.os }}
#    strategy:
#      matrix:
#        os: [ubuntu-20.04, windows-latest, macos-latest]
#    env:
#      dotNetVersion: net7.0
#      dotNetConfiguration: Release
#    steps:
#      # checkout the repo
#      - uses: actions/checkout@v2
#        with:
#          submodules: 'true'
#
#      # install dependencies, build, and test
#      - name: Setup Dotnet for use with actions
#        uses: actions/setup-dotnet@v1
#        with:
#          dotnet-version: '7.x'
#
#      - name: Cache Nuget Packages
#        uses: actions/cache@v2
#        with:
#          path: ~/.nuget/packages
#          # Look to see if there is a cache hit for the corresponding requirements file
#          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
#          restore-keys: |
#            ${{ runner.os }}-nuget
#
#      - name: Run automated unit and integration tests
#        run: dotnet test
  